<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="2" failures="0" skipped="0" tests="2" time="300.663" timestamp="2025-08-28T19:12:51.632724" hostname="MOUSTAPHA-PC"><testcase classname="tests.test_selenium_flask" name="test_login_invalid" time="300.063"><error message="failed on setup with &quot;KeyError: 'status'&quot;">@pytest.fixture(scope="module")
    def driver():
        """Initialise Chrome headless pour Selenium Remote WebDriver"""
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
    
        capabilities = options.to_capabilities()
    
&gt;       driver = webdriver.Remote(
            command_executor="http://localhost:4444/wd/hub",
            desired_capabilities=capabilities
        )

tests\test_selenium_flask.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:90: in __init__
    self.start_session(desired_capabilities, browser_profile)
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:177: in start_session
    response = self.execute(Command.NEW_SESSION, capabilities)
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B5CB974D0&gt;
response = {'status': 500, 'value': '{\n  "value": {\n    "error": "session not created",\n    "message": "Could not start a new ..."className": "java.lang.Thread",\n        "lineNumber": 829,\n        "classLoaderName": null\n      }\n    ]\n  }\n}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
&gt;                       status = value["status"]
E                       KeyError: 'status'

.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:104: KeyError</error></testcase><testcase classname="tests.test_selenium_flask" name="test_login_valid" time="0.001"><error message="failed on setup with &quot;KeyError: 'status'&quot;">@pytest.fixture(scope="module")
    def driver():
        """Initialise Chrome headless pour Selenium Remote WebDriver"""
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
    
        capabilities = options.to_capabilities()
    
&gt;       driver = webdriver.Remote(
            command_executor="http://localhost:4444/wd/hub",
            desired_capabilities=capabilities
        )

tests\test_selenium_flask.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:90: in __init__
    self.start_session(desired_capabilities, browser_profile)
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:177: in start_session
    response = self.execute(Command.NEW_SESSION, capabilities)
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B5CB974D0&gt;
response = {'status': 500, 'value': '{\n  "value": {\n    "error": "session not created",\n    "message": "Could not start a new ..."className": "java.lang.Thread",\n        "lineNumber": 829,\n        "classLoaderName": null\n      }\n    ]\n  }\n}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
&gt;                       status = value["status"]
E                       KeyError: 'status'

.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:104: KeyError</error></testcase></testsuite></testsuites>